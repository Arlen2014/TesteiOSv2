//
//  LoginViewController.swift
//  TesteiOSv2_ArlenPereira
//
//  Created by Arlen Ricardo Pereira on 28/01/20.
//  Copyright (c) 2020 Arlen Ricardo Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JGProgressHUD

protocol LoginDisplayLogic: class
{
    func displayLogin(viewModel: LoginModel.LoginRequestModel.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    let hud = JGProgressHUD(style: .dark)
    let loginSegue = "Statement"

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupProgressHUD()
    
    usernameTextField.text = "test@gmail.com"
    passwordTextField.text = "Test@1"
    
    usernameTextField.returnKeyType = .next
    passwordTextField.returnKeyType = .go
    
    let gesture = UITapGestureRecognizer(target: self, action: #selector(self.dismissKeyboard (_:)))
    self.view.addGestureRecognizer(gesture)
  }
  
  // MARK: Interface
  
  //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var usernameTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var loginBtnOutlet: UIButton!
    
    // MARK: Function
    
    func setupProgressHUD() {
        hud.textLabel.text = "Loading"
    }
    
    @objc func dismissKeyboard(_ sender: UITapGestureRecognizer) {
        usernameTextField.resignFirstResponder()
        passwordTextField.resignFirstResponder()
    }
    
    func login(username: String, password: String)
    {
        hud.show(in: self.view, animated: true)
        let request = LoginModel.LoginRequestModel.Request(username: username, password: password )
        interactor?.loginRequest(request: request)
    }
  
  func displayLogin(viewModel: LoginModel.LoginRequestModel.ViewModel)
  {
    if !viewModel.data.isEmpty {
        hud.dismiss(afterDelay: 1.0, animated: true)
        performSegue(withIdentifier: loginSegue, sender: nil)
    }

  }
    
    // MARK: Function
    @IBAction func loginButton(_ sender: UIButton) {
        
        login(username: usernameTextField.text!, password: passwordTextField.text!)
    }
}

extension LoginViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == usernameTextField {
            textField.resignFirstResponder()
            passwordTextField.becomeFirstResponder()
        } else if textField == passwordTextField {
            textField.resignFirstResponder()
        }
        return true
    }
}
